package vpower

import (
	"fmt"
	"github.com/beatoz/beatoz-go/types"
	"github.com/stretchr/testify/require"
	"strings"
	"testing"
)

type caseObj struct {
	power    int64
	height   int64
	atHeight int64
	expected string
}

// the following data is generated by the google spreadsheets
var cases = []*caseObj{
	{5048691, 195156, 604800, "0.0090146"},
	{5194814, 183448, 1209600, "0.0093858"},
	{4451965, 294189, 1814400, "0.0081193"},
	{945691, 842155, 2419200, "0.0017266"},
	{4889880, 1450915, 3024000, "0.0089269"},
	{107726, 2339225, 3628800, "0.0001956"},
	{251700, 1318685, 4233600, "0.0004711"},
	{493130, 2797377, 4838400, "0.0009082"},
	{2657503, 1873203, 5443200, "0.0050342"},
	{2493689, 4663217, 6048000, "0.0045363"},
	{1631074, 5962107, 6652800, "0.0029281"},
	{2999410, 4250585, 7257600, "0.0056238"},
	{1259668, 5642609, 7862400, "0.0023277"},
	{4388707, 5527533, 8467200, "0.0082184"},
	{3999849, 1584620, 9072000, "0.0081165"},
	{3379466, 9518393, 9676800, "0.0060049"},
	{2929503, 1740095, 10281600, "0.0060509"},
	{3679876, 26625, 10886400, "0.0078945"},
	{243556, 11205357, 11491200, "0.0004338"},
	{5037696, 2440591, 12096000, "0.0105985"},
	{5418780, 12389323, 12700800, "0.0096571"},
	{4639166, 9555541, 13305600, "0.0088169"},
	{3086269, 2022793, 13910400, "0.0067302"},
	{3875865, 11658886, 14515200, "0.0072470"},
	{5796371, 3302970, 15120000, "0.0126260"},
	{3641964, 1847546, 15724800, "0.0081915"},
	{3827016, 1942076, 16329600, "0.0086749"},
	{248639, 9303949, 16934400, "0.0005058"},
	{1179743, 17224236, 17539200, "0.0021026"},
	{5311799, 9857029, 18144000, "0.0109249"},
	{46834, 7495018, 18748800, "0.0001011"},
	{234035, 6771142, 19353600, "0.0005160"},
	{1288635, 11499028, 19958400, "0.0026580"},
	{2217591, 6284421, 20563200, "0.0050184"},
	{1023313, 16885409, 21168000, "0.0019636"},
	{1876264, 10869079, 21772800, "0.0040280"},
	{5859677, 13458273, 22377600, "0.0121793"},
	{4586366, 2482591, 22982400, "0.0113613"},
	{3979150, 10566829, 23587200, "0.0088325"},
	{2754517, 22750615, 24192000, "0.0050161"},
	{3386721, 21818919, 24796800, "0.0063465"},
	{3161407, 19737434, 25401600, "0.0062167"},
	{4649667, 8880265, 26006400, "0.0109781"},
	{4832831, 19442559, 26611200, "0.0097538"},
	{5159685, 11686305, 27216000, "0.0118987"},
	{78630, 25213682, 27820800, "0.0001463"},
	{4214294, 5558463, 28425600, "0.0107831"},
	{5809309, 17309143, 29030400, "0.0126350"},
	{2355252, 658157, 29635200, "0.0065218"},
	{5199693, 12767017, 30240000, "0.0123388"},
	{3374213, 13526026, 30844800, "0.0079890"},
	{514833, 7753783, 31449600, "0.0013320"},
	{1546661, 23675925, 32054400, "0.0031859"},
	{2314222, 22883687, 32659200, "0.0048783"},
	{1949253, 22906721, 33264000, "0.0041480"},
	{3439662, 33498846, 33868800, "0.0061369"},
	{820641, 25987539, 34473600, "0.0016935"},
	{5298932, 19182755, 35078400, "0.0122865"},
	{3544901, 33986284, 35683200, "0.0064866"},
	{4353540, 7951637, 36288000, "0.0119591"},
	{504724, 5599022, 36892800, "0.0014379"},
	{5686166, 1690149, 37497600, "0.0162462"},
	{5457108, 16971302, 38102400, "0.0136369"},
	{846631, 18774277, 38707200, "0.0020807"},
	{656228, 24369360, 39312000, "0.0015001"},
	{1685907, 11726810, 39916800, "0.0046227"},
	{5642987, 18182469, 40521600, "0.0143361"},
	{2226005, 29290861, 41126400, "0.0048502"},
	{776724, 33810940, 41731200, "0.0015877"},
	{1509909, 23355865, 42336000, "0.0036613"},
	{4086778, 37674163, 42940800, "0.0079804"},
	{2032818, 32702803, 43545600, "0.0043598"},
	{3283189, 1777348, 44150400, "0.0093805"},
	{2486388, 43397799, 44755200, "0.0045207"},
	{4474013, 4611613, 45360000, "0.0127829"},
	{4247103, 39897447, 45964800, "0.0084106"},
	{5634776, 13189966, 46569600, "0.0160994"},
	{5579729, 20788284, 47174400, "0.0149528"},
	{4232631, 4394700, 47779200, "0.0120932"},
	{4432983, 11963762, 48384000, "0.0126657"},
	{1568170, 2092459, 48988800, "0.0044805"},
	{1253563, 30155261, 49593600, "0.0030595"},
	{435261, 18714438, 50198400, "0.0012428"},
	{72441, 34338268, 50803200, "0.0001694"},
	{824962, 27369665, 51408000, "0.0021441"},
	{2073184, 19265323, 52012800, "0.0059234"},
	{1411740, 45230083, 52617600, "0.0028599"},
	{3814029, 49132586, 53222400, "0.0072933"},
	{234914, 35859576, 53827200, "0.0005614"},
	{2774709, 4568890, 54432000, "0.0079277"},
	{4367576, 30057854, 55036800, "0.0114928"},
	{3360219, 38306091, 55641600, "0.0079578"},
	{1875875, 46146784, 56246400, "0.0039752"},
	{2200582, 40208513, 56851200, "0.0051590"},
	{4670972, 23329098, 57456000, "0.0133456"},
	{3872006, 33116217, 58060800, "0.0101842"},
	{3648839, 15957822, 58665600, "0.0104253"},
	{4261707, 6236161, 59270400, "0.0121763"},
	{3253469, 56496363, 59875200, "0.0061418"},
	{4848485, 26195767, 60480000, "0.0138528"},
}

func Test_WeightOfPower(t *testing.T) {
	ripeningBlock := int64(31536000)
	tau := int32(380)
	_totalSupply := types.PowerToAmount(int64(350_000_000))
	for _, c := range cases {
		pc := &PowerChunkProto{Power: c.power, Height: c.height}
		w := fxnumWeightOfPowerChunks([]*PowerChunkProto{pc}, c.atHeight, ripeningBlock, tau, _totalSupply)
		require.Equal(t, strings.TrimRight(c.expected, "0"), w.String(),
			fmt.Sprintf("expected:%v, actual:%v\n", c.expected, w.String()))
	}
}

type powerTest struct {
	power  int64
	height int64
}

type weightTest struct {
	atHeight int64
	weight   string
}

var samplePowers = []*powerTest{
	{1377307, 17180275},
	{1151992, 14116236},
	{2568149, 12931192},
	{5246, 16165872},
	{2152431, 5232779},
	{2189971, 18012203},
	{2204880, 31370268},
	{4605315, 20875450},
	{1045242, 21125441},
	{3207467, 2203243},
	{4590843, 3820636},
	{3730376, 28272932},
	{359854, 2680834},
	{3358970, 2216836},
	{5935840, 14841939},
	{4549813, 9471303},
	{4930896, 10525055},
	{942426, 16367257},
	{5306568, 11648176},
	{994875, 25017542},
	{1143147, 14511423},
	{1522081, 15473323},
	{1995314, 15518649},
	{3380838, 4564304},
	{2522520, 8510894},
	{3690769, 3401901},
	{3633573, 3672413},
	{629106, 836201},
	{4691208, 10203671},
	{5620163, 11155721},
	{4408697, 17099624},
	{935303, 13115054},
	{1136270, 11000504},
	{1282393, 18125329},
	{1676368, 24354447},
	{5463733, 16985527},
	{1872170, 30459487},
	{2661767, 18922162},
	{3028636, 28573875},
	{2423569, 28855686},
	{2750423, 26731384},
	{5030542, 3828344},
	{4408010, 24471128},
	{3198693, 10746898},
	{5723448, 6221270},
	{3255438, 5438788},
	{70240, 11761302},
	{1016384, 3252316},
	{4255877, 10621500},
	{799671, 9334755},
	{4761598, 13281344},
	{3367971, 25113986},
	{1215713, 7742254},
	{1540419, 23248896},
	{3955894, 14974122},
	{393672, 18841611},
	{2540858, 4382871},
	{4513443, 16632538},
	{2593306, 26633032},
	{4993741, 18940651},
	{2243902, 27339398},
	{3838918, 178043},
	{4827225, 21850485},
	{2795300, 2950889},
	{1541326, 746035},
	{2991103, 28925199},
	{5585161, 12907140},
	{339533, 11733396},
	{4563029, 8499855},
	{574559, 11539620},
	{5736665, 6290782},
	{1974992, 23173144},
	{225259, 12576624},
	{1171402, 21687281},
	{3176785, 11323821},
	{812887, 15497759},
	{2137465, 28122863},
	{3522989, 2609866},
	{1916455, 23284382},
	{4375157, 23341008},
	{2323345, 28226856},
	{4902363, 2124528},
	{2674391, 8068431},
	{4664165, 661265},
	{767136, 2059712},
	{3361192, 6201297},
	{5955250, 15323254},
	{5295954, 13119851},
	{5601032, 9856942},
	{927460, 9890968},
	{2310836, 27781840},
	{2255789, 19824493},
	{500472, 17700191},
	{1113340, 29580732},
	{5589482, 19643490},
	{2813638, 8812099},
	{5355581, 1393633},
	{4235555, 11652745},
	{3515478, 29791152},
	{98496, 1317517},
}

var expectedWeights = []*weightTest{
	{604800, "0.0068568"},
	{7862400, "0.1544359"},
	{15120000, "0.3521545"},
	{22377600, "0.5075596"},
	{29635200, "0.6559212"},
	{36892800, "0.7354141"},
	{44150400, "0.7827655"},
}

func Test_WeightPower_Sum(t *testing.T) {
	ripeningBlock := int64(31536000)
	tau := int32(380)
	_totalSupply := types.PowerToAmount(int64(350_000_000))
	_powerChunks := make([]*PowerChunkProto, len(samplePowers))
	for i, c := range samplePowers {
		_powerChunks[i] = &PowerChunkProto{Power: c.power, Height: c.height}
	}

	for _, r := range expectedWeights {
		w := fxnumWeightOfPowerChunks(_powerChunks, r.atHeight, ripeningBlock, tau, _totalSupply)
		require.Equal(t, strings.TrimRight(r.weight, "0"), w.String(),
			fmt.Sprintf("expected:%v, actual:%v\n", r.weight, w.String()))
	}
}
